[{"D:\\Project\\ygocarder\\src\\index.js":"1","D:\\Project\\ygocarder\\src\\reportWebVitals.js":"2","D:\\Project\\ygocarder\\src\\App.tsx":"3","D:\\Project\\ygocarder\\src\\app.tsx":"4","D:\\Project\\ygocarder\\src\\model\\index.tsx":"5","D:\\Project\\ygocarder\\src\\component\\index.tsx":"6","D:\\Project\\ygocarder\\src\\util\\index.tsx":"7","D:\\Project\\ygocarder\\src\\model\\textbox.ts":"8","D:\\Project\\ygocarder\\src\\component\\loading\\index.tsx":"9","D:\\Project\\ygocarder\\src\\model\\monster.ts":"10","D:\\Project\\ygocarder\\src\\component\\card-picture\\index.tsx":"11","D:\\Project\\ygocarder\\src\\util\\categorize.tsx":"12","D:\\Project\\ygocarder\\src\\component\\link-marker\\index.tsx":"13","D:\\Project\\ygocarder\\src\\page\\index.tsx":"14","D:\\Project\\ygocarder\\src\\page\\input-panel\\index.tsx":"15","D:\\Project\\ygocarder\\src\\const\\index.tsx":"16","D:\\Project\\ygocarder\\src\\const\\size.ts":"17","D:\\Project\\ygocarder\\src\\util\\condenser.ts":"18","D:\\Project\\ygocarder\\src\\util\\canvas.ts":"19","D:\\Project\\ygocarder\\src\\draw\\index.ts":"20","D:\\Project\\ygocarder\\src\\draw\\util.ts":"21","D:\\Project\\ygocarder\\src\\const\\position.ts":"22","D:\\Project\\ygocarder\\src\\draw\\predefine.ts":"23","D:\\Project\\ygocarder\\src\\draw\\type-ability.ts":"24","D:\\Project\\ygocarder\\src\\page\\input-panel\\char-picker.tsx":"25"},{"size":510,"mtime":1615011759183,"results":"26","hashOfConfig":"27"},{"size":404,"mtime":1610181300618,"results":"28","hashOfConfig":"27"},{"size":356,"mtime":1609165206100,"results":"29","hashOfConfig":"30"},{"size":19554,"mtime":1616328633193,"results":"31","hashOfConfig":"27"},{"size":2858,"mtime":1616296128372,"results":"32","hashOfConfig":"27"},{"size":96,"mtime":1616216014660,"results":"33","hashOfConfig":"27"},{"size":2132,"mtime":1616216665588,"results":"34","hashOfConfig":"27"},{"size":71,"mtime":1610181846036,"results":"35","hashOfConfig":"27"},{"size":237,"mtime":1610249200959,"results":"36","hashOfConfig":"27"},{"size":1318,"mtime":1615907291666,"results":"37","hashOfConfig":"27"},{"size":5716,"mtime":1615730716120,"results":"38","hashOfConfig":"27"},{"size":676,"mtime":1616225210740,"results":"39","hashOfConfig":"27"},{"size":2084,"mtime":1616293508715,"results":"40","hashOfConfig":"27"},{"size":116,"mtime":1614408441494,"results":"41","hashOfConfig":"27"},{"size":14748,"mtime":1616513388704,"results":"42","hashOfConfig":"27"},{"size":333,"mtime":1616216109219,"results":"43","hashOfConfig":"27"},{"size":3711,"mtime":1616210340868,"results":"44","hashOfConfig":"27"},{"size":1607,"mtime":1615820470685,"results":"45","hashOfConfig":"27"},{"size":2845,"mtime":1616328619018,"results":"46","hashOfConfig":"27"},{"size":723,"mtime":1616217374630,"results":"47","hashOfConfig":"27"},{"size":9622,"mtime":1616311010259,"results":"48","hashOfConfig":"27"},{"size":518,"mtime":1616216099579,"results":"49","hashOfConfig":"27"},{"size":1329,"mtime":1616216582315,"results":"50","hashOfConfig":"27"},{"size":5185,"mtime":1616218007829,"results":"51","hashOfConfig":"27"},{"size":3031,"mtime":1616513196904,"results":"52","hashOfConfig":"27"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"tkh1wh",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"afpoqm",{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Project\\ygocarder\\src\\index.js",[],["107","108"],"D:\\Project\\ygocarder\\src\\reportWebVitals.js",[],"D:\\Project\\ygocarder\\src\\App.tsx",[],"D:\\Project\\ygocarder\\src\\app.tsx",["109","110","111"],"\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport './app.scss';\nimport 'antd/dist/antd.css';\nimport {\n    Card,\n    defaultMonster,\n    iconList,\n} from './model';\nimport { debounce } from 'lodash';\nimport {\n    checkLink,\n    checkMonster,\n    checkNormal,\n    checkXyz,\n    getCardFrame,\n    drawFromSource,\n    drawFromSourceWithSize,\n} from './util';\nimport { CardInputPanel } from './page';\nimport {\n    arrowPositionList,\n    pendulumFontList,\n    pendulumSizeList,\n    stFontList,\n    stSizeList,\n    TypeSize,\n    typeSizeMap,\n} from './const';\nimport './asset/font.css';\nimport {\n    draw1stEdition,\n    drawAD,\n    drawBracketSpaceTemplate,\n    drawBracketTemplate,\n    drawCreatorText,\n    drawEffect,\n    drawIconSpaceTemplate,\n    drawScale,\n    drawTextTemplate,\n    fillTextLeftWithLimit,\n    fillTextLeftWithSpacing,\n} from './draw';\nimport WebFont from 'webfontloader';\n\nfunction App() {\n    const [isInitializing, setInitializing] = useState(true);\n    const [currentCard, setCard] = useState<Card>(defaultMonster);\n    const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n    const drawCanvasRef = useRef<HTMLCanvasElement>(null);\n    const frameCanvasRef = useRef<HTMLCanvasElement>(null);\n    const artCanvasRef = useRef<HTMLCanvasElement>(null);\n    const specialFrameCanvasRef = useRef<HTMLCanvasElement>(null);\n    const subFamilyCanvasRef = useRef<HTMLCanvasElement>(null);\n    const pendulumScaleCanvasRef = useRef<HTMLCanvasElement>(null);\n    const pendulumEffectCanvasRef = useRef<HTMLCanvasElement>(null);\n    const typeCanvasRef = useRef<HTMLCanvasElement>(null);\n    const effectCanvasRef = useRef<HTMLCanvasElement>(null);\n    const nameCanvasRef = useRef<HTMLCanvasElement>(null);\n    const attributeCanvasRef = useRef<HTMLCanvasElement>(null);\n    const ADCanvasRef = useRef<HTMLCanvasElement>(null);\n    const setIdRef = useRef<HTMLCanvasElement>(null);\n    const passcodeRef = useRef<HTMLCanvasElement>(null);\n    const firstEditionRef = useRef<HTMLCanvasElement>(null);\n    const creatorRef = useRef<HTMLCanvasElement>(null);\n\n    const {\n        frame,\n        name,\n        effect,\n        type_ability,\n        isPendulum, pendulum_effect, blue_scale, red_scale,\n        atk, def, link_map,\n        attribute,\n        subFamily,\n        star,\n        set_id,\n        passcode, isFirstEdition, creator,\n    } = currentCard;\n    const isNormal = checkNormal(currentCard);\n    const isXyz = checkXyz(currentCard);\n    const isLink = checkLink(currentCard);\n    const isMonster = checkMonster(currentCard);\n    const pendulumSize = 'medium';\n\n    const drawingStatus = useRef<Record<string, Promise<any>>>({\n        frame: Promise.resolve(),\n        star: Promise.resolve(),\n        attribute: Promise.resolve(),\n        specialFrame: Promise.resolve(),\n    });\n    const [imageChangeCount, setImageChangeCount] = useState(0);\n\n    useEffect(() => {\n        const ctx = frameCanvasRef.current?.getContext('2d');\n        const cardType = getCardFrame(frame);\n        \n        ctx?.clearRect(0, 0, 549, 800);\n        drawingStatus.current.frame = drawFromSource(ctx, `/asset/image/frame/frame-${cardType}.png`, 0, 0);\n    }, [frame]);\n\n    useEffect(() => {\n        const ctx = artCanvasRef.current?.getContext('2d');\n        const previewCtx = previewCanvasRef.current;\n        if (previewCtx && ctx) {\n            ctx.clearRect(0, 0, 548, 650);\n            if (isPendulum) {\n                ctx.drawImage(previewCtx, 38, 144, 474, 470);\n            } else {\n                ctx.drawImage(previewCtx, 67, 147, 416, 416);\n            }\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isPendulum, imageChangeCount]);\n\n    useEffect(() => {\n        const ctx = specialFrameCanvasRef.current?.getContext('2d');\n        ctx?.clearRect(0, 0, 549, 800);\n        \n        const cardType = getCardFrame(frame);\n        drawingStatus.current.specialFrame = (async () => {\n            if (isPendulum && !isLink) {\n                if (!isXyz) await drawFromSource(ctx, `/asset/image/pendulum/overlay-pendulum-${cardType}.png`, 0, 0);\n                await drawFromSource(ctx, `/asset/image/frame/frame-pendulum-${pendulumSize}.png`, 0, 0);\n            }\n            await drawFromSource(ctx, '/asset/image/frame/frame-border.png', 0, 0);\n            if (!isPendulum && isLink) {\n                await drawFromSource(ctx, '/asset/image/link/link-overlay.png', 66, 146);\n                await Promise.all(link_map\n                    .map(entry => {\n                        const { left, top, height, width } = arrowPositionList[parseInt(entry) - 1];\n                        return drawFromSourceWithSize(ctx, `/asset/image/link/link-arrow-${entry}.png`, left, top, width, height);\n                    })\n                );\n                if (link_map.length > 0) await drawFromSource(ctx, `./asset/image/link-number/link-corner-${link_map.length}.png`, 549 - 61, 800 - 69);\n            }\n        })();\n    }, [frame, isLink, isPendulum, isXyz, link_map]);\n\n    useEffect(() => {\n        const ctx = attributeCanvasRef.current?.getContext('2d');\n        ctx?.clearRect(0, 0, 549, 100);\n        drawingStatus.current.attribute = drawFromSource(ctx, `/asset/image/attribute/attr-${attribute.toLowerCase()}.png`, 458, 37);\n    }, [attribute]);\n\n    useEffect(() => {\n        const ctx = subFamilyCanvasRef.current?.getContext('2d');\n        ctx?.clearRect(0, 0, 549, 150);\n        if (isMonster && !isLink) {\n            let counter = Math.min(13, star ?? 0);\n            let type = isXyz ? 'rank' : 'level';\n            let offset = 0 - (34 + 2.3636);\n            let totalWidth = 34 * counter + 2.3636 * (counter - 1);\n            let startPoint = counter <= 12\n                ? isXyz\n                    ? 57 - 34\n                    : 492\n                : isXyz\n                    ? (549 - totalWidth) / 2 - 34\n                    : (549 - totalWidth) / 2 + totalWidth;\n            drawingStatus.current.star = Promise.all([...Array(counter)]\n                .map(() => {\n                    offset += (34 + 2.3636);\n                    return drawFromSource(\n                        ctx,\n                        `/asset/image/sub-family/subfamily-${type}.png`,\n                        startPoint + (34 + offset) * (isXyz ? 1 : -1),\n                        99,\n                    );\n                })\n            );\n        } else if (!isMonster) {\n            const normalizedSubFamily = subFamily.toUpperCase();\n            const hasSTIcon = normalizedSubFamily !== 'no icon'\n                && iconList.includes(normalizedSubFamily);\n\n            drawingStatus.current.star = hasSTIcon\n                ? drawFromSourceWithSize(ctx, `/asset/image/sub-family/subfamily-${normalizedSubFamily}.png`,\n                    (image) => 491 - image.naturalWidth - 7,\n                    103,\n                    29, 29)\n                : new Promise(resolve => resolve(true));\n        }\n    }, [isLink, isMonster, isXyz, star, subFamily]);\n\n    useEffect(() => {\n        const ctx = pendulumScaleCanvasRef.current?.getContext('2d');\n        ctx?.clearRect(0, 0, 549, 600);\n        if (ctx && isPendulum) {\n            let fontSize = 43;\n            let top = 532 + fontSize;\n\n            ctx.font = `${fontSize}px MatrixBoldSmallCaps`;\n            ctx.textAlign = 'left';\n\n            drawScale(ctx, blue_scale ?? 0, 57, top);\n            drawScale(ctx, red_scale ?? 0, 493, top);\n        }\n    }, [isInitializing, blue_scale, isPendulum, red_scale]);\n\n    useEffect(() => {\n        const ctx = nameCanvasRef.current?.getContext('2d');\n        if (ctx) {\n            ctx.clearRect(0, 0, 549, 100);\n            ctx.font = '64.59px MatrixRegularSmallCaps';\n            ctx.textAlign = 'left';\n            ctx.fillStyle = isXyz ? '#ffffff' : '#000000';\n\n            fillTextLeftWithLimit(ctx, name, 40.52, 81, 409);\n        }\n    }, [isInitializing, isXyz, name]);\n\n    useEffect(() => {\n        const ctx = ADCanvasRef.current?.getContext('2d');\n        ctx?.clearRect(0, 0, 549, 800);\n        if (isMonster) {\n            drawAD(ctx, atk, 343.51, 747);\n            if (!isLink) {\n                drawAD(ctx, def, 454.93, 747);\n            }\n        }\n    }, [isInitializing, atk, def, isLink, isMonster]);\n\n    useEffect(() => {\n        const ctx = setIdRef.current?.getContext('2d');\n        ctx?.clearRect(0, 0, 549, 800);\n        if (ctx) {\n            if (isXyz && !isPendulum) ctx.fillStyle = '#fff';\n            else ctx.fillStyle = '#000';\n            ctx.font = '18px stone-serif-regular';\n\n            if (isPendulum) {\n                fillTextLeftWithSpacing(ctx, set_id, -0.15, 46, 746);\n            } else if (isLink) {\n                fillTextLeftWithSpacing(ctx, set_id, -0.15, 352, 590);\n            } else fillTextLeftWithSpacing(ctx, set_id, -0.15, 396, 589);\n        }\n    }, [isInitializing, isLink, isPendulum, isXyz, set_id]);\n\n    useEffect(() => {\n        const ctx = passcodeRef.current?.getContext('2d');\n        ctx?.clearRect(0, 0, 549, 800);\n        if (ctx) {\n            if (isXyz && !isPendulum) ctx.fillStyle = '#fff';\n            else ctx.fillStyle = '#000';\n            ctx.font = '18px stone-serif-regular';\n\n            fillTextLeftWithSpacing(ctx, passcode, -0.1, 25, 777);\n        }\n    }, [isInitializing, isLink, isPendulum, isXyz, passcode]);\n\n    useEffect(() => {\n        const ctx = firstEditionRef.current?.getContext('2d');\n        ctx?.clearRect(0, 0, 549, 800);\n        if (ctx && isFirstEdition === true) {\n            if (isXyz && !isPendulum) ctx.fillStyle = '#fff';\n            else ctx.fillStyle = '#000';\n\n            draw1stEdition(ctx);\n        }\n    }, [isInitializing, isLink, isPendulum, isXyz, isFirstEdition]);\n\n    useEffect(() => {\n        const ctx = creatorRef.current?.getContext('2d');\n        ctx?.clearRect(0, 0, 549, 800);\n        if (ctx) {\n            if (isXyz && !isPendulum) ctx.fillStyle = '#fff';\n            else ctx.fillStyle = '#000';\n            \n            drawCreatorText(ctx, creator);\n        }\n    }, [isInitializing, isLink, isPendulum, isXyz, creator]);\n\n    const drawTypeAbility  = useCallback((\n        ctx: CanvasRenderingContext2D | null | undefined,\n        size: TypeSize = typeSizeMap['medium'],\n        alignment: 'left' | 'right' = 'left',\n    ) => {\n        if (ctx) {\n            ctx?.clearRect(0, 0, 549, 700);\n            const { left } = size;\n            const normalizedSubFamily = subFamily.toUpperCase();\n            const instructionList = [\n                drawBracketTemplate(ctx, '[', size, alignment),\n                drawBracketSpaceTemplate(ctx, ' ', size, alignment),\n                ...type_ability.map((entry, index) => drawTextTemplate(\n                    ctx,\n                    entry,\n                    index === type_ability.length - 1,\n                    size, alignment)),\n                normalizedSubFamily === 'NO ICON'\n                    ? (edge: number) => edge + 4 * (alignment === 'left' ? 1 : -1)\n                    : drawIconSpaceTemplate(ctx, size, alignment),\n                drawBracketTemplate(ctx, ']', size, alignment),\n            ];\n            (alignment === 'left'\n                ? instructionList\n                : instructionList.reverse()).reduce((prev, curr) => {\n                return curr(prev);\n            }, left);\n            ctx.textAlign = 'left';\n        }\n    }, [subFamily, type_ability]);\n    useEffect(() => {\n        const ctx = effectCanvasRef.current?.getContext('2d');\n        const typeCtx = typeCanvasRef.current?.getContext('2d');\n        if (isMonster) {\n            const effectIndexSize = drawEffect(ctx, effect, false, isNormal);\n            drawTypeAbility(typeCtx, effectIndexSize === 0\n                ? typeSizeMap['medium']\n                : typeSizeMap['small']);\n        } else {\n            drawEffect(\n                ctx,\n                effect,\n                false,\n                false,\n                stFontList,\n                stSizeList,\n            );\n            drawTypeAbility(typeCtx, typeSizeMap['large'], 'right');\n        }\n    }, [isInitializing, drawTypeAbility, effect, isMonster, isNormal]);\n    useEffect(() => {\n        const ctx = pendulumEffectCanvasRef.current?.getContext('2d');\n        if (isMonster && isPendulum) {\n            drawEffect(\n                ctx,\n                pendulum_effect,\n                true,\n                false,\n                pendulumFontList,\n                pendulumSizeList,\n            );\n        }\n    }, [isInitializing, isMonster, isPendulum, pendulum_effect]);\n\n    const drawRefrenceImage  = useCallback(async (ctx: CanvasRenderingContext2D | null | undefined) => {\n        let leftOffset = -5;\n        let topOffset = -150;\n        // let leftOffset = -4;\n        // let topOffset = 300;\n        // let leftOffset = -300;\n        // let topOffset = -7;\n        // let leftOffset = -1;\n        // let topOffset = 100;\n        // await drawFromSourceWithSize(ctx, '/asset/image/MP18-EN-C-1E.png', -leftOffset, -topOffset, 541, 800 * (541 / 549));\n    }, []);\n\n    useEffect(() => {\n        const ctx = drawCanvasRef.current?.getContext('2d');\n        if (ctx) {\n            const pixelRatio = window.devicePixelRatio;\n            ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n            ctx.imageSmoothingQuality = 'high';\n            ctx.clearRect(0, 0, 549, 800);\n        }\n        \n        // let fontLoaded = false;\n        WebFont.load({\n            custom: {\n                families: [\n                    'stone-serif-bold',\n                    'stone-serif-bold',\n                    'stone-serif-regular',\n                    'palatino-linotype-bold',\n                    'MatrixBook',\n                    'ITCStoneSerifMedium',\n                    'ITCStoneSerifBold',\n                    'ITCStoneSerifSmallCapsBold',\n                    'MatrixBoldSmallCaps',\n                    'MatrixRegularSmallCaps',\n                ],\n                urls: ['./asset/font.css']\n            },\n            active: () => {\n                // fontLoaded = true;\n                setInitializing(false);\n            }\n        });\n    }, []);\n\n    useEffect(() => {\n        // let relevant = true;\n        let abortExport = () => {};\n\n        (async () => {\n            const canvasRef = drawCanvasRef.current;\n            if (canvasRef) {\n                await Promise.any([\n                    onExport({ isPendulum }),\n                    new Promise((resolve, reject) => abortExport = reject),\n                ]);\n            }\n        })();\n\n        return () => {\n            // relevant = false;\n            abortExport();\n        };\n    });\n\n    const onExport = useRef(async (exportProps: {\n        isPendulum: boolean,\n    }) => {\n        const {\n            isPendulum = false\n        } = exportProps;\n        const canvasRef = drawCanvasRef.current;\n        const exportCtx = canvasRef?.getContext('2d');\n        const generateLayer = (canvasLayer: React.RefObject<HTMLCanvasElement>, ctx: CanvasRenderingContext2D | null | undefined) => {\n            return new Promise<boolean>(resolve => {\n                if (canvasLayer.current && ctx) {\n                    const layerData = canvasLayer.current.toDataURL('image/png');\n\n                    if (layerData) {\n                        var layer = new Image();\n                        layer.src = layerData;\n                        layer.onload = () => {\n                            ctx.drawImage(layer, 0, 0);\n                            resolve(true);\n                        };\n                    } else resolve(false);\n                } else resolve(false);\n            });\n        };\n\n        if (canvasRef && exportCtx) {\n            exportCtx.clearRect(0, 0, 549, 800);\n            await Promise.all(Object.values(drawingStatus));\n            await generateLayer(frameCanvasRef, exportCtx);\n            const previewCtx = previewCanvasRef.current;\n            if (previewCtx && exportCtx) {\n                if (isPendulum) {\n                    exportCtx.drawImage(previewCtx, 38, 144, 474, 470);\n                } else {\n                    exportCtx.drawImage(previewCtx, 67, 147, 416, 416);\n                }\n            }\n            await generateLayer(specialFrameCanvasRef, exportCtx);\n            const layerList = [\n                nameCanvasRef,\n                attributeCanvasRef,\n                subFamilyCanvasRef,\n                pendulumScaleCanvasRef,\n                pendulumEffectCanvasRef,\n                typeCanvasRef,\n                effectCanvasRef,\n                ADCanvasRef,\n                setIdRef,\n                firstEditionRef,\n                passcodeRef,\n                creatorRef,\n            ];\n            await Promise.all([\n                layerList.map(currentlayer => generateLayer(currentlayer, exportCtx)),\n            ]);\n            await drawRefrenceImage(exportCtx);\n        }\n    }).current;\n\n    return (\n        <div className={'app-container'} style={{\n            backgroundImage: 'url(\"/asset/image/texture/debut-dark.png\"), linear-gradient(180deg, #00000022, #00000044)',\n        }}>\n            {isInitializing && <div className=\"full-loading\">\n                Initializing...\n            </div>}\n            <div className=\"card-filter-panel\">\n            </div>\n            <CardInputPanel\n                receivingCanvasRef={previewCanvasRef.current}\n                currentCard={currentCard}\n                onCardChange={setCard}\n                onImageChange={() => {\n                    setImageChangeCount(cnt => cnt + 1);\n                }}\n            />\n            <div className=\"card-preview-panel\">\n                <button className=\"export-button\">Save Card: Right click → \"Save image as...\"</button>\n                <div className=\"card-canvas-group\">\n                    <canvas className=\"export-canvas\" ref={drawCanvasRef} width={549} height={800} />\n                    <canvas id=\"frameCanvas\" ref={frameCanvasRef} width={549} height={800} />\n                    <canvas id=\"artCanvas\" ref={artCanvasRef} width={549} height={650} />\n                    <canvas id=\"specialFrameCanvas\" ref={specialFrameCanvasRef} width={549} height={800} />\n                    <canvas id=\"nameCanvas\" ref={nameCanvasRef} width={549} height={100} />\n                    <canvas id=\"attributeCanvas\" ref={attributeCanvasRef} width={549} height={100} />\n                    <canvas id=\"subFamilyCanvas\" ref={subFamilyCanvasRef} width={549} height={150} />\n                    <canvas id=\"pendulumScaleCanvas\" ref={pendulumScaleCanvasRef} width={549} height={600} />\n                    <canvas id=\"pendulumEffectCanvas\" ref={pendulumEffectCanvasRef} width={549} height={600} />\n                    <canvas id=\"typeCanvas\" ref={typeCanvasRef} width={549} height={700} />\n                    <canvas id=\"effectCanvas\" ref={effectCanvasRef} width={549} height={750} />\n                    <canvas id=\"ADCanvas\" ref={ADCanvasRef} width={549} height={800} />\n                    <canvas id=\"setId\" ref={setIdRef} width={549} height={800} />\n                    <canvas id=\"passcode\" ref={passcodeRef} width={549} height={800} />\n                    <canvas id=\"firstEdition\" ref={firstEditionRef} width={549} height={800} />\n                    <canvas id=\"creator\" ref={creatorRef} width={549} height={800} />\n                    <canvas className=\"crop-canvas\" ref={previewCanvasRef} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n",["112","113"],"D:\\Project\\ygocarder\\src\\model\\index.tsx",[],"D:\\Project\\ygocarder\\src\\component\\index.tsx",[],"D:\\Project\\ygocarder\\src\\util\\index.tsx",[],"D:\\Project\\ygocarder\\src\\model\\textbox.ts",[],"D:\\Project\\ygocarder\\src\\component\\loading\\index.tsx",[],["114","115"],"D:\\Project\\ygocarder\\src\\model\\monster.ts",[],"D:\\Project\\ygocarder\\src\\component\\card-picture\\index.tsx",[],"D:\\Project\\ygocarder\\src\\util\\categorize.tsx",[],"D:\\Project\\ygocarder\\src\\component\\link-marker\\index.tsx",[],"D:\\Project\\ygocarder\\src\\page\\index.tsx",[],"D:\\Project\\ygocarder\\src\\page\\input-panel\\index.tsx",[],"D:\\Project\\ygocarder\\src\\const\\index.tsx",[],"D:\\Project\\ygocarder\\src\\const\\size.ts",[],"D:\\Project\\ygocarder\\src\\util\\condenser.ts",[],"D:\\Project\\ygocarder\\src\\util\\canvas.ts",[],"D:\\Project\\ygocarder\\src\\draw\\index.ts",[],"D:\\Project\\ygocarder\\src\\draw\\util.ts",[],"D:\\Project\\ygocarder\\src\\const\\position.ts",[],"D:\\Project\\ygocarder\\src\\draw\\predefine.ts",[],"D:\\Project\\ygocarder\\src\\draw\\type-ability.ts",[],"D:\\Project\\ygocarder\\src\\page\\input-panel\\char-picker.tsx",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":10,"column":10,"nodeType":"122","messageId":"123","endLine":10,"endColumn":18},{"ruleId":"120","severity":1,"message":"124","line":339,"column":13,"nodeType":"122","messageId":"123","endLine":339,"endColumn":23},{"ruleId":"120","severity":1,"message":"125","line":340,"column":13,"nodeType":"122","messageId":"123","endLine":340,"endColumn":22},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"116","replacedBy":"126"},{"ruleId":"118","replacedBy":"127"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"@typescript-eslint/no-unused-vars","'debounce' is defined but never used.","Identifier","unusedVar","'leftOffset' is assigned a value but never used.","'topOffset' is assigned a value but never used.",["128"],["129"],"no-global-assign","no-unsafe-negation"]